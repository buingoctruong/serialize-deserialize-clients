plugins {
    id 'java'
    id 'application'
    id 'com.github.johnrengelman.shadow' version '5.2.0'
    id 'com.github.ben-manes.versions' version '0.28.0'
}

group = 'github.io.truongbn'
version = '0.0.1-SNAPSHOT'
mainClassName = 'github.io.truongbn.xmlclients.Cli'

java {
    sourceCompatibility = '17'
}

repositories {
    mavenCentral()
}

ext {
    jacksonVersion = '2.16.0'
    jmhVersion = '1.36'
}

dependencies {
    // CLI and misc
    implementation group: 'io.airlift', name: 'airline', version: '0.9'
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.12.0'

    // JMH
    implementation group: 'org.openjdk.jmh', name: 'jmh-core', version: "${jmhVersion}"
    annotationProcessor group: 'org.openjdk.jmh', name: 'jmh-generator-annprocess', version: "${jmhVersion}"

    implementation group: 'com.thoughtworks.xstream', name: 'xstream', version: '1.4.20'

    implementation group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: "${jacksonVersion}"
    implementation group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-xml', version: "${jacksonVersion}"

    implementation group: 'javax.xml.bind', name: 'jaxb-api', version: '2.3.1'
    implementation group: 'javax.activation', name: 'activation', version: '1.1.1'
    implementation group: 'org.glassfish.jaxb', name: 'jaxb-runtime', version: '2.3.1'

}

shadowJar {
    archiveFileName = 'app.jar'
    exclude 'META-INF/*.SF'
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'
}

tasks.named('test') {
    doLast {
        def size = 0
        def formatStr = '%,10.2f'
        configurations.default.collect { it.length() / (1024 * 1024) }.each { size += it }

        def out = new StringBuffer()
        out << 'Total dependencies size:'.padRight(45)
        out << "${String.format(formatStr, size)} MiB\n\n"

        configurations
                .default
                .sort { -it.length() }
                .each {
                    out << "${it.name}".padRight(45)
                    out << "${String.format(formatStr, (it.length() / 1024))} KiB\n"
                }
        println(out)
    }
}
